import{d,h as p,l as u,o as n,c as i,m as e,t,F as _,G as h,q as y,s as m,_ as v,J as b,a4 as S}from"./chunks/framework.4aTu-Nia.js";const a=r=>(y("data-v-420673be"),r=r(),m(),r),f={class:"price-feed"},g=a(()=>e("h2",{class:"feed-title"},"LIVE PRICE FEED",-1)),D={class:"network-badge"},U={class:"feed-details"},C={class:"detail"},w=a(()=>e("span",{class:"detail-label"},"Data source:",-1)),I={class:"detail-value"},k={class:"detail"},P=a(()=>e("span",{class:"detail-label"},"Status:",-1)),T={class:"detail-value"},A={class:"detail"},E=a(()=>e("span",{class:"detail-label"},"Base asset:",-1)),O={class:"detail-value"},x={class:"detail"},R=a(()=>e("span",{class:"detail-label"},"Decimals:",-1)),F={class:"detail-value"},N={class:"detail"},L=a(()=>e("span",{class:"detail-label"},"Sampling:",-1)),V={class:"detail-value"},X={class:"detail"},B=a(()=>e("span",{class:"detail-label"},"Retention:",-1)),q={class:"detail-value"},M={class:"price-updates"},j=a(()=>e("h3",{class:"updates-title"},"Recent price feed updates:",-1)),J={class:"price-list"},z={class:"symbol"},H={class:"price"},$={class:"currency"},G=d({__name:"PriceFeed",setup(r){const s=p({network:"pubnet network",oracleContract:"CAFJ...4DLN",dataSource:"External CEX & DEX",status:"live (4-of-7 multisig)",baseAsset:"USD",decimals:14,sampling:"5 minutes",retention:"24 hours",lastUpdate:"2025-01-27 12:00:00 UTC",prices:[{symbol:"BTC",price:"95309.00159947487622",currency:"USD"},{symbol:"ETH",price:"1814.72039152720102",currency:"USD"},{symbol:"USDT",price:"1.00034324509816",currency:"USD"},{symbol:"XRP",price:"2.32708235667266",currency:"USD"},{symbol:"SOL",price:"152.17158362715446",currency:"USD"},{symbol:"USDC",price:"0.9996447234705",currency:"USD"},{symbol:"ADA",price:"0.72088071600326",currency:"USD"},{symbol:"AVAX",price:"22.24191499471181",currency:"USD"},{symbol:"DOT",price:"4.22671786376265",currency:"USD"},{symbol:"MATIC",price:"0.24530573337044",currency:"USD"},{symbol:"LINK",price:"14.94700072131707",currency:"USD"},{symbol:"DAI",price:"0.99990258318827",currency:"USD"},{symbol:"ATOM",price:"4.45631391845605",currency:"USD"},{symbol:"XLM",price:"0.28902643520506",currency:"USD"},{symbol:"UNI",price:"5.59886940588937",currency:"USD"},{symbol:"EURC",price:"1.13440057421877",currency:"USD"}]}),l=async()=>{try{console.log("Price feed would be fetched here")}catch(o){console.error("Failed to fetch price feed:",o)}};return u(()=>{l();const o=setInterval(l,5*60*1e3);return()=>clearInterval(o)}),(o,Y)=>(n(),i("div",f,[g,e("div",D,t(s.value.network),1),e("div",U,[e("div",C,[w,e("span",I,t(s.value.dataSource),1)]),e("div",k,[P,e("span",T,t(s.value.status),1)]),e("div",A,[E,e("span",O,t(s.value.baseAsset),1)]),e("div",x,[R,e("span",F,t(s.value.decimals),1)]),e("div",N,[L,e("span",V,t(s.value.sampling),1)]),e("div",X,[B,e("span",q,t(s.value.retention),1)])]),e("div",M,[j,e("div",J,[(n(!0),i(_,null,h(s.value.prices,c=>(n(),i("div",{key:c.symbol,class:"price-item"},[e("span",z,t(c.symbol),1),e("span",H,t(c.price),1),e("span",$,t(c.currency),1)]))),128))])])]))}}),K=v(G,[["__scopeId","data-v-420673be"]]),Q=S('<h1 id="integrate-oracles-into-your-smart-contract" tabindex="-1">Integrate Oracles into your Smart Contract <a class="header-anchor" href="#integrate-oracles-into-your-smart-contract" aria-label="Permalink to &quot;Integrate Oracles into your Smart Contract&quot;">​</a></h1><p>Choose what kind of a price feed you need — the one that reports Stellar Classic DEX asset prices on Soroban, or a token price feed from external centralized and decentralized exchanges. Copy a corresponding contract address and use it in your project.</p><p>Check <a href="./../overview/usage-examples">usage examples</a> to discover how basic oracle usage scenarios can be implemented on top of our infrastructure. Have questions? Do not hesitate to reach us or ask other developers on <a href="https://discord.gg/v2ggfDty2d" target="_blank" rel="noreferrer">Reflector Discord</a>.</p><p>Reflector oracles are deployed on both Stellar Testnet and Public networks. Play around with them, test your code and then seamlessly switch to Pubnet once ready — just update the contract address, and that&#39;s it.</p><p>Our price feeds receive updates every 5 minutes. Since Reflector oracles operate non-stop, price data is written to the temporary storage and can be evicted over time. Calling the period() function on the oracle contract will return a guaranteed contract history retention period, usually 24 hours.</p><p>Reflector public price feed is free for everyone, without limitations. Don&#39;t see the token or a price source you are interested in? Let&#39;s talk on Discord or via email, we&#39;ll try to help you.</p>',6),ee=JSON.parse('{"title":"Integrate Oracles into your Smart Contract","description":"Integrate Oracles into your Smart Contract","frontmatter":{"description":"Integrate Oracles into your Smart Contract"},"headers":[],"relativePath":"how-to-guides/integrate-oracles.md","filePath":"how-to-guides/integrate-oracles.md","lastUpdated":1745849057000}'),W={name:"how-to-guides/integrate-oracles.md"},te=Object.assign(W,{setup(r){return(s,l)=>(n(),i("div",null,[Q,b(K)]))}});export{ee as __pageData,te as default};
